buckhorn state park,v
It is deep inside the cold neutral medium clouds that hydrogen and most        other elements are likely to exist in molecular form,v
        in the intro we cite \citet{lee12},V
This statement requires citation~\cite{Smith:2012qr}.,V
Department and University Name,v
2,v
5,v
    velocity_centers = np.arange(-30, 30, 5)    velocity_widths = np.arange(1, 80, 5),v
1,v
0,v
8,v
6,v
3,v
/,v
http://adsabs.harvard.edu/cgi-bin/nph-data_query?bibcode=2014AJ....148...35B&db_key=AST&link_type=ARTICLE,v
,,v
git remote add origin git@bitbucket.org:ezbc/posters.git,v
http://arxiv.org/pdf/1007.5060,v
    	print 'plotting',v
anneal,v
lbfgsb,v
Howard Chen <yihaochentw@gmail.com>,v
x,v
_,v
yy,v
widthwidth,v
[0*wmax, 0.5*wmax, 1.0*wmax],v
c,v
*wmax,v
d,v
4,v
l,v
),v
centercenter,v
v,v
h,v
,v
        if center_confint is not None:        	ax_pdf_center.axvspan(center_confint[1],        	                      center_confint[2],        	                      color='k',        	                      alpha=0.2),v
 ,v
* delta_width    #,v
$\\$$\\$,v
n,v
#,v
s,v
np.arange(0,velocity_widths.shape[0],1)[::5],v
y,v
width_pdf,v
),v
        ax_pdf_width = divider.append_axes("top", 1.2, pad=0.1, sharex=ax_image)        ax_pdf_center = divider.append_axes("right", 1.2, pad=0.1,                sharey=ax_image),v
e,v
    ax_image.set_aspect(1.),v
gist_stern,v
    divider = make_axes_locatable(ax_image)    ax_pdf_width = divider.append_axes("top", 1.2, pad=0.1, sharex=ax_image)    ax_pdf_center = divider.append_axes("right", 1.2, pad=0.1, sharey=ax_image)    # make some labels invisible    plt.setp(ax_pdf_width.get_xticklabels() + ax_pdf_center.get_yticklabels(),             visible=False)    ax_pdf_width.plot(velocity_widths, width_pdf)    ax_pdf_width.plot(velocity_centers, center_pdf)    #axHistx.axis["bottom"].major_ticklabels.set_visible(False)    for tl in ax_pdf_width.get_xticklabels():        tl.set_visible(False)    ax_pdf_width.set_yticks([0, 0.5, 1])    for tl in ax_pdf_center.get_xticklabels():        tl.set_visible(False)    ax_pdf_center.set_yticks([0, 0.5, 1]),v
    #plt.rc('text', usetex=False)    im = ax_image.imshow(image, interpolation='nearest', origin='lower',            extent=[velocity_widths[0],velocity_widths[-1],                    velocity_centers[0],velocity_centers[-1]],            cmap=plt.cm.gist_stern,            #cmap=plt.cm.gray,            #norm=matplotlib.colors.LogNorm(),            ),v
, orientation='horizontal',v
import numpy as npimport matplotlib.pyplot as pltfrom matplotlib.ticker import NullFormatterdef makeTempHistogramPlot(xdata,ydata,rexp,filename=None,xlims=-99, ylims =-99 , \nxbins = 50,nybins=50, bw=0, nbins=100,contours=1,sigma=1,line=1):#bw = 0 for color, = 1 for black and white#line = 0 for no line, =1 for line#sigma = 1 for display % below line, =0 for not#contours = 1 for display 1,2,3 sigma contours, = 0 for not.# Define the x and y datax = xdatay = ydata# Set up default x and y limitsif (xlims == -99): xlims = [0,max(x)]if (ylims == -99): ylims = [0,max(y)]# Set up your x and y labelsxlabel = '$\mathrm{Your\\ X\\ Label}$'ylabel = '$\mathrm{Your\\ X\\ Label}$'mtitle = ''# Define the locations for the axesleft, width = 0.12, 0.55bottom, height = 0.12, 0.55bottom_h = left_h = left+width+0.02# Set up the geometry of the three plotsrect_temperature = [left, bottom, width, height] # dimensions of temp plotrect_histx = [left, bottom_h, width, 0.25] # dimensions of x-histogramrect_histy = [left_h, bottom, 0.25, height] # dimensions of y-histogram# Set up the size of the figurefig = plt.figure(1, figsize=(9.5,9))# Make the three plotsaxTemperature = plt.axes(rect_temperature) # temperature plotaxHistx = plt.axes(rect_histx) # x histogramaxHisty = plt.axes(rect_histy) # y histogram# Remove the inner axes numbers of the histogramsnullfmt = NullFormatter()axHistx.xaxis.set_major_formatter(nullfmt)axHisty.yaxis.set_major_formatter(nullfmt)# Find the min/max of the dataxmin = min(xlims)xmax = max(xlims)ymin = min(ylims)ymax = max(y)# Make the 'main' temperature plotxbins = linspace(start = 0, stop = xmax, num = nxbins)ybins = linspace(start = 0, stop = ymax, num = nybins)xcenter = (xbins[0:-1]+xbins[1:])/2.0ycenter = (ybins[0:-1]+ybins[1:])/2.0aspectratio = 1.0*(xmax - 0)/(1.0*ymax - 0)H, xedges,yedges = N.histogram2d(y,x,bins=(ybins,xbins))X = xcenterY = ycenterZ = H# Plot the temperature dataif(bw): cax = axTemperature.imshow(H, extent=[xmin,xmax,ymin,ymax], \ interpolation='nearest', origin='lower',aspect=aspectratio, cmap=cm.gist_yarg)else : cax = axTemperature.imshow(H, extent=[xmin,xmax,ymin,ymax], \interpolation='nearest', origin='lower',aspect=aspectratio)# Plot the temperature plot contoursif(bw): contourcolor = 'black'else: contourcolor = 'white'if (contours==0):print ''elif (contours==1):xcenter = N.mean(x)ycenter = N.mean(y)ra = N.std(x)rb = N.std(y)ang = 0X,Y=ellipse(ra,rb,ang,xcenter,ycenter)axTemperature.plot(X,Y,"k:",ms=1,linewidth=2.0)axTemperature.annotate('$1\\sigma$', xy=(X[15], Y[15]), xycoords='data',xytext=(10, 10), textcoords='offset points',horizontalalignment='right', verticalalignment='bottom',fontsize=25)X,Y=ellipse(2*ra,2*rb,ang,xcenter,ycenter)axTemperature.plot(X,Y,"k:",color = contourcolor,ms=1,linewidth=2.0)axTemperature.annotate('$2\\sigma$', xy=(X[15], Y[15]), xycoords='data',xytext=(10, 10), textcoords='offset points',horizontalalignment='right', verticalalignment='bottom',fontsize=25, color = contourcolor)X,Y=ellipse(3*ra,3*rb,ang,xcenter,ycenter)axTemperature.plot(X,Y,"k:",color = contourcolor, ms=1,linewidth=2.0)axTemperature.annotate('$3\\sigma$', xy=(X[15], Y[15]), xycoords='data',xytext=(10, 10), textcoords='offset points',horizontalalignment='right', verticalalignment='bottom',fontsize=25, color = contourcolor)else:xcenter = N.mean(x)ycenter = N.mean(y)ra = N.std(x)rb = N.std(y)ang = contours*N.pi/180.0X,Y=ellipse(ra,rb,ang,xcenter,ycenter)axTemperature.plot(X,Y,"k:",ms=1,linewidth=2.0)axTemperature.annotate('$1\\sigma$', xy=(X[15], Y[15]), xycoords='data', xytext=(10, 10), textcoords='offset points',horizontalalignment='right', verticalalignment='bottom',fontsize=25)X,Y=ellipse(2*ra,2*rb,ang,xcenter,ycenter)axTemperature.plot(X,Y,"k:",ms=1,linewidth=2.0, color = contourcolor)axTemperature.annotate('$2\\sigma$', xy=(X[15], Y[15]), xycoords='data', xytext=(10, 10), textcoords='offset points',horizontalalignment='right', verticalalignment='bottom',fontsize=25, color = contourcolor)X,Y=ellipse(3*ra,3*rb,ang,xcenter,ycenter)axTemperature.plot(X,Y,"k:",ms=1,linewidth=2.0, color = contourcolor)axTemperature.annotate('$3\\sigma$', xy=(X[15], Y[15]), xycoords='data', xytext=(10, 10), textcoords='offset points',horizontalalignment='right', verticalalignment='bottom',fontsize=25, color = contourcolor)#Plot the % below linebelowline = 1.0*size(where((x - y) > 0.0))/size(x)*1.0*100if(sigma): axTemperature.annotate('$%.2f\%%\mathrm{\\ Below\\ Line}$'%(belowline), xy=(xmax-100, ymin+3),fontsize=20, color = contourcolor)#Plot the axes labelsaxTemperature.set_xlabel(xlabel,fontsize=25)axTemperature.set_ylabel(ylabel,fontsize=25)#Make the tickmarks prettyticklabels = axTemperature.get_xticklabels()for label in ticklabels:label.set_fontsize(18)label.set_family('serif')ticklabels = axTemperature.get_yticklabels()for label in ticklabels:label.set_fontsize(18)label.set_family('serif')#Plot the line on the temperature plotif(line): axTemperature.plot([-1000,1000], [-1000,1000], 'k-', linewidth=2.0, color = contourcolor)#Set up the plot limitsaxTemperature.set_xlim(xlims)axTemperature.set_ylim(ylims)#Set up the histogram binsxbins = N.arange(xmin, xmax, (xmax-xmin)/nbins)ybins = N.arange(ymin, ymax, (ymax-ymin)/nbins)#Plot the histogramsif (bw):axHistx.hist(x, bins=xbins, color = 'silver')axHisty.hist(y, bins=ybins, orientation='horizontal', color = 'dimgray')else:axHistx.hist(x, bins=xbins, color = 'blue')axHisty.hist(y, bins=ybins, orientation='horizontal', color = 'red')#Set up the histogram limitsaxHistx.set_xlim( 0, max(x) )axHisty.set_ylim( 0, max(y))#Make the tickmarks prettyticklabels = axHistx.get_yticklabels()for label in ticklabels:label.set_fontsize(12)label.set_family('serif')#Make the tickmarks prettyticklabels = axHisty.get_xticklabels()for label in ticklabels:label.set_fontsize(12)label.set_family('serif')#Cool trick that changes the number of tickmarks for the histogram axesaxHisty.xaxis.set_major_locator(MaxNLocator(4))axHistx.yaxis.set_major_locator(MaxNLocator(4))if(filename):savefig(filename + '.eps',format = 'eps', transparent=True)savefig(filename + '.pdf',format = 'pdf', transparent=True)savefig(filename + '.png',format = 'png', transparent=True),v
    pvalues = np.ma.array(pvalues,            mask=np.isnan(pvalues)),v
-,v
    correlations = correlations - np.sum(correlations),v
i,v
.,v
    print correlations    print correlations.min()    print correlations.max(),v
    correlations -= correlations.max(),v
    	model_error = np.std(model),v
        av_image_error_corr = av_image_error[indices],v
    #import matplotlib.pyplot as plt    #plt.imshow(data - model)    #plt.show(),v
data_error,v
    print correlations    correlations -= correlations.max(),v
http://stats.stackexchange.com/questions/66616/converting-normalizing-very-small-likelihood-values-to-probability,v
+,v
    print correlations.max(),v
    print correlations.min()    print correlations.max(),v
 / np.sum(correlations),v
    correlations = np.exp(correlations / np.sum(correlations)),v
        ''',v
>>> from pprint import pprint,v
options={'gtol': 1e-6, 'disp': True,v
89.7131,v
    help(minimize),v
S,v
    print(result['low_vel'].value),v
    from myimage_analysis import calculate_nhi,v
,               vary=vary[1],v
guesses, av_image=None, av_image_error=None, hi_cube=None,        hi_velocity_axis=None, hi_noise_cube=None, dgr=None,v
phi_cnm,v
par,v
q,v
_error,v
        nhi_image_temp, nhi_image_error = calculate_nhi(cube=hi_cube,                velocity_axis=hi_velocity_axis,                velocity_range=velocity_range,                noise_cube=hi_noise_cube)        nhi_image = np.ma.array(nhi_image_temp,                                mask=np.isnan(nhi_image_temp))        # Select pixels with Av > 1.0 mag and Av_SNR > 5.0.        # Av > 1.0 mag is used to avoid too low Av.        # 1.0 mag corresponds to SNR = 1 / 0.2 ~ 5        # (see Table 2 of Ridge et al. 2006).        indices = np.where((nhi_image_temp == nhi_image_temp) & \                           (av_image == av_image))        nhi_image_corr = nhi_image_temp[indices]        nhi_image_error_corr = nhi_image_error[indices]        av_image_corr = av_image[indices]        av_image_error_corr = av_image_error[indices]        av_image_model = nhi_image_corr * dgr        av_image_model_error = nhi_image_error_corr * dgr,v
                         model_error=av_image_model_error,,v
    print logL,v
*,v
http://www.physics.utah.edu/~detar/phys6720/handouts/curve_fit/curve_fit/node2.html,v
norm=matplotlib.colors.LogNorm(),v
hg clone https://vim.googlecode.com/hg/ vim,v
hg clone https://vim.googlecode.com/hg/ vim,V
http://arxiv.org/pdf/1408.3071,v
        av_image_model = nhi_image_corr * dgr,v
, pvalues[i] = kendalltau(nhi_image_corr.ravel(),                                                 av_image_corr.ravel()),v
/ av_error_data_planck > 5),v
